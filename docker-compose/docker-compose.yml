---
version: "3.8"
services:
  postgres:
    image: postgres:14.4-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/

  traefik:
    image: "traefik:v2.8"
    container_name: traefik
    environment:
      - TZ
      - AWS_ACCESS_KEY_ID
      - AWS_REGION
      - AWS_SECRET_ACCESS_KEY
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - certs:/certs
      - "./traefik/traefik.toml:/etc/traefik/traefik.toml"
    restart: unless-stopped
    networks:
       - traefik

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - podgrab_config:/config
      - podgrab_data:/assets
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podgrab.rule=Host(`podgrab.pistack.jkolios.xyz`)"
      - "traefik.http.routers.podgrab.entrypoints=websecure"
      - "traefik.http.routers.podgrab.tls.certresolver=route53"
    restart: unless-stopped

  blocky:
    image: spx01/blocky
    container_name: blocky
    restart: unless-stopped
    environment:
      - TZ=${TZ} # Optional to synchronize the log timestamp with host
    volumes:
      # config file
      - ./blocky/config/config.yml:/app/config.yml
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.rule=Host(`blocky.pistack.jkolios.xyz`)"
      - "traefik.http.routers.blocky.entrypoints=websecure"
      - "traefik.http.routers.blocky.tls.certresolver=route53"
      - "traefik.http.services.blocky.loadbalancer.server.port=4000"

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   restart: always
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.pistack.jkolios.xyz`)"
  #     - "traefik.http.routers.prometheus.entrypoints=websecure"
  #     - "traefik.http.routers.prometheus.tls.certresolver=route53"

  # grafana:
  #   image: grafana/grafana:6.7.1
  #   container_name: grafana
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/:/etc/grafana/provisioning/
  #     - ./grafana/grafana.ini:/etc/grafana/grafana.ini
  #   environment:
  #     - GF_PANELS_DISABLE_SANITIZE_HTML=true
  #   restart: always
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.pistack.jkolios.xyz`)"
  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.tls.certresolver=route53"

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional
    volumes:
      - calibre-web_config:/config
      - calibre-web_books:/books
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.pistack.jkolios.xyz`)"
      - "traefik.http.routers.calibre-web.entrypoints=websecure"
      - "traefik.http.routers.calibre-web.tls.certresolver=route53"

  app:
    container_name: ttrss_app
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - postgres

  backups:
    container_name: ttrss_backups
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_backups:/backups
      - ttrss_app:/var/www/html
    depends_on:
      - postgres
    command: /opt/tt-rss/dcron.sh -f

  updater:
    container_name: ttrss_updater
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - app
    command: /opt/tt-rss/updater.sh

  web-nginx:
    container_name: ttrss_frontend
    build: ./ttrss/web-nginx
    restart: unless-stopped
    volumes:
      - ttrss_app:/var/www/html:ro
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ttrss.rule=Host(`ttrss.pistack.jkolios.xyz`)"
      - "traefik.http.routers.ttrss.entrypoints=websecure"
      - "traefik.http.routers.ttrss.tls.certresolver=route53"

  yeelight-controller:
    image: ghcr.io/jkolios/yeelightcontroller:master
    container_name: yeelight-controller
    restart: unless-stopped
    network_mode: host
    labels:
      - "traefik.enable=false"

  # mitmweb:
  #   container_name: mitmweb
  #   image: mitmproxy/mitmproxy
  #   restart: unless-stopped
  #   tty: true
  #   ports:
  #     - 8081:8080
  #   command: mitmweb
  #   volumes:
  #     - mitmproxy:/home/mitmproxy/
  #     - ./mitmproxy/config.yaml:/home/mitmproxy/.mitmproxy/config.yaml
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.mitmweb.rule=Host(`mitmweb.pistack.jkolios.xyz`)"
  #     - "traefik.http.routers.mitmweb.entrypoints=websecure"
  #     - "traefik.http.routers.mitmweb.tls.certresolver=route53"
  #     - "traefik.http.services.mitmweb.loadbalancer.server.port=8081"

  ddns-route53:
    image: crazymax/ddns-route53:latest
    container_name: ddns-route53
    environment:
      - "TZ=Europe/Athens"
      - "SCHEDULE=*/30 * * * *"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
      - "DDNSR53_CREDENTIALS_ACCESSKEYID=${AWS_ACCESS_KEY_ID}"
      - "DDNSR53_CREDENTIALS_SECRETACCESSKEY=${AWS_SECRET_ACCESS_KEY}"
      - "DDNSR53_ROUTE53_HOSTEDZONEID=Z046614912T6BYUCHMM5M"
      - "DDNSR53_ROUTE53_RECORDSSET_0_NAME=pistack-remote.jkolios.xyz."
      - "DDNSR53_ROUTE53_RECORDSSET_0_TYPE=A"
      - "DDNSR53_ROUTE53_RECORDSSET_0_TTL=300"
      - "DDNSR53_ROUTE53_RECORDSSET_1_NAME=*.pistack-remote.jkolios.xyz."
      - "DDNSR53_ROUTE53_RECORDSSET_1_TYPE=A"
      - "DDNSR53_ROUTE53_RECORDSSET_1_TTL=300"
    restart: always

  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
      - NZBGET_USER=nzbget
      - NZBGET_PASS=nzbget
    volumes:
      - nzbget_config:/config
      - downloads:/downloads #optional
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.pistack.jkolios.xyz`)"
      - "traefik.http.routers.nzbget.entrypoints=websecure"
      - "traefik.http.routers.nzbget.tls.certresolver=route53"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent_config:/config
      - downloads:/downloads #optional
    ports:
      - "6881:6881"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.pistack.jkolios.xyz`)"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=route53"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - sonarr_config:/config
      - downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.pistack.jkolios.xyz`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=route53"

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - plex_config:/config
      - downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=false"

  # wireguard:
  #   image: lscr.io/linuxserver/wireguard:latest
  #   container_name: wireguard
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/Athens
  #     - SERVERURL=pistack.jkolios.xyz
  #     - SERVERPORT=51820 #optional
  #     - PEERS=1 #optional
  #     - PEERDNS=auto #optional
  #     - INTERNAL_SUBNET=10.13.13.0 #optional
  #     - ALLOWEDIPS=0.0.0.0/0 #optional
  #     - LOG_CONFS=true #optional
  #   volumes:
  #     - wireguard_config:/config
  #     - /lib/modules:/lib/modules
  #   ports:
  #     - "51820:51820/udp"
  #   sysctls:
  #     - net.ipv4.conf.all.src_valid_mark=1
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.wireguard.rule=Host(`wireguard.pistack.jkolios.xyz`)"
  #     - "traefik.http.routers.wireguard.entrypoints=websecure"
  #     - "traefik.http.routers.wireguard.tls.certresolver=route53"

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    ports:
      - 3000:3000
    volumes:
      - ./homepage:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`homepage.pistack.jkolios.xyz`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=route53"

volumes:
  podgrab_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_config"
  podgrab_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_data"
  prometheus_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/prometheus_data"
  grafana_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/grafana_data"
  calibre-web_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/calibre-web_config"
  calibre-web_books:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/books"
  pg_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/pg_data"
  ttrss_app:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_app"
  ttrss_backups:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_backups"
  certs:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/certs"
  mitmproxy:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/mitmproxy"
  nzbget_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/nzbget_config"
  qbittorrent_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/qbittorrent_config"
  plex_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/plex_config"
  sonarr_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/sonarr_config"
  wireguard_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/wireguard_config"
  downloads:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/Storage/downloads"


 networks:
   traefik:
     external:
       name: traefik