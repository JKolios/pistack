---
version: "3.8"
services:
  postgres:
    image: postgres:14.4-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/

  traefik:
    image: "traefik:v2.8"
    container_name: "traefik"
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - heimdall_config:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.pistack.local`)"
      - "traefik.http.routers.heimdall.entrypoints=web"
    restart: unless-stopped

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - podgrab_config:/config
      - podgrab_data:/assets
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podgrab.rule=Host(`podgrab.pistack.local`)"
      - "traefik.http.routers.podgrab.entrypoints=web"
    restart: unless-stopped

  blocky:
    image: spx01/blocky
    container_name: blocky
    restart: unless-stopped
    environment:
      - TZ=Europe/Athens # Optional to synchronize the log timestamp with host
    volumes:
      # config file
      - ./blocky/config/config.yml:/app/config.yml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.rule=Host(`blocky.pistack.local`)"
      - "traefik.http.routers.blocky.entrypoints=web"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.pistack.local`)"
      - "traefik.http.routers.prometheus.entrypoints=web"

  grafana:
    image: grafana/grafana:6.7.1
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_SECURITY_ADMIN_USER=“admin”
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.pistack.local`)"
      - "traefik.http.routers.grafana.entrypoints=web"

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional
    volumes:
      - calibre-web_config:/config
      - "/mnt/books/Calibre Library:/books"
    ports:
      - 8082:8083
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.pistack.local`)"
      - "traefik.http.routers.calibre-web.entrypoints=web"

  app:
    build:
      context:
        ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - postgres

  backups:
    build:
      context:
        ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_backups:/backups
      - ttrss_app:/var/www/html
    depends_on:
      - postgres
    command: /opt/tt-rss/dcron.sh -f

  updater:
    build:
      context:
        ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - app
    command: /opt/tt-rss/updater.sh

  web-nginx:
    build: ./ttrss/web-nginx
    restart: unless-stopped
    ports:
      - 8084:80
    volumes:
      -  ttrss_app:/var/www/html:ro
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.feedpushr.rule=Host(`ttrss.pistack.local`)"
      - "traefik.http.routers.feedpushr.entrypoints=web"

volumes:
  heimdall_config: {}
  podgrab_config: {}
  podgrab_data: {}
  prometheus_data: {}
  grafana_data: {}
  calibre-web_config: {}
  pg_data: {}
  ttrss_app: {}
  ttrss_backups: {}
