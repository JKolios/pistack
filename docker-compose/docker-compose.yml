---
version: "3.8"
services:
  postgres:
    image: postgres:14.4-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/

  traefik:
    image: "traefik:v2.8"
    container_name: traefik
    environment:
      - TZ
      - CF_API_EMAIL
      - CF_API_KEY
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - certs:/certs
      - "./configs/traefik/:/etc/traefik/"
    restart: unless-stopped

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - podgrab_config:/config
      - podgrab_data:/assets
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podgrab.rule=Host(\"podgrab.${DOMAIN}\")"
      - "traefik.http.routers.podgrab.entrypoints=websecure"
      - "traefik.http.routers.podgrab.tls.certresolver=cloudflare"
    restart: unless-stopped

  blocky:
    image: spx01/blocky
    container_name: blocky
    restart: unless-stopped
    environment:
      - TZ=${TZ} # Optional to synchronize the log timestamp with host
    volumes:
      # config file
      - ./configs/blocky/config/config.yml:/app/config.yml
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.rule=Host(\"blocky.${DOMAIN}\")"
      - "traefik.http.routers.blocky.entrypoints=websecure"
      - "traefik.http.routers.blocky.tls.certresolver=cloudflare"
      - "traefik.http.services.blocky.loadbalancer.server.port=4000"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(\"prometheus.${DOMAIN}\")"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"

  grafana:
    image: grafana/grafana:6.7.1
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning/:/etc/grafana/provisioning/
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(\"grafana.${DOMAIN}\")"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre 
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 
    volumes:
      - calibre-web_config:/config
      - calibre-web_books:/books
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(\"calibre-web.${DOMAIN}\")"
      - "traefik.http.routers.calibre-web.entrypoints=websecure"
      - "traefik.http.routers.calibre-web.tls.certresolver=cloudflare"

  app:
    container_name: ttrss_app
    build:
      context: ./configs/ttrss/app
    restart: unless-stopped
    env_file:
      - ./configs/ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - postgres

  backups:
    container_name: ttrss_backups
    build:
      context: ./configs/ttrss/app
    restart: unless-stopped
    env_file:
      - ./configs/ttrss/.env
    volumes:
      - ttrss_backups:/backups
      - ttrss_app:/var/www/html
    depends_on:
      - postgres
    command: /opt/tt-rss/dcron.sh -f

  updater:
    container_name: ttrss_updater
    build:
      context: ./configs/ttrss/app
    restart: unless-stopped
    env_file:
      - ./configs/ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - app
    command: /opt/tt-rss/updater.sh

  web-nginx:
    container_name: ttrss_frontend
    build: ./configs/ttrss/web-nginx
    restart: unless-stopped
    volumes:
      - ttrss_app:/var/www/html:ro
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ttrss.rule=Host(\"ttrss.${DOMAIN}\")"
      - "traefik.http.routers.ttrss.entrypoints=websecure"
      - "traefik.http.routers.ttrss.tls.certresolver=cloudflare"

  yeelight-controller:
    image: ghcr.io/jkolios/yeelightcontroller:master
    container_name: yeelight-controller
    restart: unless-stopped
    network_mode: host
    labels:
      - "traefik.enable=false"

  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
      - NZBGET_USER=nzbget
      - NZBGET_PASS=nzbget
    volumes:
      - nzbget_config:/config
      - downloads:/downloads #optional
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbget.rule=Host(\"nzbget.${DOMAIN}\")"
      - "traefik.http.routers.nzbget.entrypoints=websecure"
      - "traefik.http.routers.nzbget.tls.certresolver=cloudflare"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent_config:/config
      - downloads:/downloads #optional
    ports:
      - "6881:6881"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(\"qbittorrent.${DOMAIN}\")"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=cloudflare"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - sonarr_config:/config
      - downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(\"sonarr.${DOMAIN}\")"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=cloudflare"

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - plex_config:/config
      - downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=false"

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    ports:
      - 3000:3000
    volumes:
      - ./configs/homepage:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(\"homepage.${DOMAIN}\")"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=cloudflare"

volumes:
  podgrab_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_config"
  podgrab_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_data"
  prometheus_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/prometheus_data"
  grafana_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/grafana_data"
  calibre-web_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/calibre-web_config"
  calibre-web_books:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/books"
  pg_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/pg_data"
  ttrss_app:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_app"
  ttrss_backups:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_backups"
  certs:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/certs"
  nzbget_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/nzbget_config"
  qbittorrent_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/qbittorrent_config"
  plex_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/plex_config"
  sonarr_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/sonarr_config"
  downloads:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/Storage/downloads"
