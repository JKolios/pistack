---
version: "3.8"
services:
  postgres:
    image: postgres:14.4-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/

  traefik:
    image: "traefik:v2.8"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - --certificatesresolvers.route53.acme.dnschallenge=true
      - --certificatesresolvers.route53.acme.dnschallenge.provider=route53
      - --certificatesresolvers.route53.acme.dnschallenge.delayBeforeCheck=0
      - --certificatesresolvers.route53.acme.dnschallenge.resolvers=1.1.1.1:53
      - --certificatesresolvers.route53.acme.email=${DOMAIN_EMAIL}
      - --certificatesresolvers.route53.acme.storage=/certs/acme.json
      - "--metrics.prometheus=true"
    environment:
      - TZ
      - AWS_ACCESS_KEY_ID
      - AWS_REGION
      - AWS_SECRET_ACCESS_KEY
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - certs:/certs
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`traefik.pistack.jkolios.xyz`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=route53"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - heimdall_config:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.pistack.jkolios.xyz`)"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls.certresolver=route53"
    restart: unless-stopped

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - podgrab_config:/config
      - podgrab_data:/assets
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.podgrab.rule=Host(`podgrab.pistack.jkolios.xyz`)"
      - "traefik.http.routers.podgrab.entrypoints=websecure"
      - "traefik.http.routers.podgrab.tls.certresolver=route53"
    restart: unless-stopped

  blocky:
    image: spx01/blocky
    container_name: blocky
    restart: unless-stopped
    environment:
      - TZ=${TZ} # Optional to synchronize the log timestamp with host
    volumes:
      # config file
      - ./blocky/config/config.yml:/app/config.yml
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "4001:4000/tcp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.rule=Host(`blocky.pistack.jkolios.xyz`)"
      - "traefik.http.routers.blocky.entrypoints=websecure"
      - "traefik.http.routers.blocky.tls.certresolver=route53"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.pistack.jkolios.xyz`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=route53"

  grafana:
    image: grafana/grafana:6.7.1
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_SECURITY_ADMIN_USER=“admin”
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.pistack.jkolios.xyz`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=route53"

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional
    volumes:
      - calibre-web_config:/config
      - "/mnt/books/Calibre Library:/books"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.pistack.jkolios.xyz`)"
      - "traefik.http.routers.calibre-web.entrypoints=websecure"
      - "traefik.http.routers.calibre-web.tls.certresolver=route53"

  app:
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - postgres

  backups:
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_backups:/backups
      - ttrss_app:/var/www/html
    depends_on:
      - postgres
    command: /opt/tt-rss/dcron.sh -f

  updater:
    build:
      context: ./ttrss/app
    restart: unless-stopped
    env_file:
      - ./ttrss/.env
    volumes:
      - ttrss_app:/var/www/html
    depends_on:
      - app
    command: /opt/tt-rss/updater.sh

  web-nginx:
    build: ./ttrss/web-nginx
    restart: unless-stopped
    volumes:
      - ttrss_app:/var/www/html:ro
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ttrss.rule=Host(`ttrss.pistack.jkolios.xyz`)"
      - "traefik.http.routers.ttrss.entrypoints=websecure"
      - "traefik.http.routers.ttrss.tls.certresolver=route53"

  yeelight-controller:
    image: ghcr.io/jkolios/yeelightcontroller:master
    container_name: yeelight-controller
    restart: unless-stopped
    network_mode: host
    labels:
      - "traefik.enable=false"
      # - "traefik.http.routers.yeelight-controller.rule=Host(`yeelight.pistack.jkolios.xyz`)"
      # - "traefik.http.routers.yeelight-controller.entrypoints=websecure"
      # - "traefik.http.routers.yeelight-controller.tls.certresolver=route53"

  mitmweb:
    image: mitmproxy/mitmproxy
    restart: unless-stopped
    tty: true
    ports:
      - 8080:8080
      - 8081:8081
    command: mitmweb --mode transparent
    volumes:
      - mitmproxy:/home/mitmproxy/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mitmweb.rule=Host(`mitmweb.pistack.jkolios.xyz`)"
      - "traefik.http.routers.mitmweb.entrypoints=websecure"
      - "traefik.http.routers.mitmweb.tls.certresolver=route53"

  # mitmdump:
  #   image: mitmproxy/mitmproxy
  #   restart: unless-stopped
  #   command: mitmdump -nC /home/mitmproxy/flows --mode transparent
  #   volumes:
  #     - mitmproxy:/home/mitmproxy/

volumes:
  heimdall_config:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/heimdall_config"
  podgrab_config: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_config"
  podgrab_data: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/podgrab_data"
  prometheus_data: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/prometheus_data"
  grafana_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/grafana_data"
  calibre-web_config: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/calibre-web_config"
  pg_data:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/pg_data"
  ttrss_app: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_app"
  ttrss_backups: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/ttrss_backups"
  certs: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/certs"
  mitmproxy: 
    driver_opts:
      type: "nfs"
      o: "addr=192.168.1.111,nolock,soft,rw"
      device: ":/volume1/DockerVolumes/mitmproxy"
